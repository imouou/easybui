{"./":{"url":"./","title":"实战案例","keywords":"","body":"实战案例 本文将通过创建一个新应用的方式，涵盖整个应用的开发，数据请求，接口跨域，模板渲染，store，表单校验，全局方法，数据存储，登录权限，路由传参，自定义组件及传参等，带您快速了解 BUI 的基本使用，建议按步骤一步步操作，文档中有不理解或者错误的地方，请通过帮助提问反馈，谢谢。 最终完成的效果：下载 bui-demo.zip 账号: easybui 密码: easybui Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-27 11:18:57 "},"chapter3/create.html":{"url":"chapter3/create.html","title":"1. 创建工程","keywords":"","body":"创建工程 完整的创建工程命令如下 如果没有这些环境，请先安装node12以上，再按步骤一步步安装。 # 创建工程 buijs create bui-demo # 进入工程 cd bui-demo # 安装工程依赖 npm install # 运行预览 npm run dev 1. 全局安装 buijs buijs是一个 cli 命令工具（需要 node 12 支持），用于快速构建工程，模板，更新平台等功能。 Windows 用户 npm install -g buijs MAC 用户 sudo npm install -g buijs MAC 需要加上权限，输入开机密码 2. 创建单页工程 创建名为bui-demo的工程模板。 # 创建工程模板 buijs create bui-demo # 进入工程目录 cd bui-demo 也可以直接下载 BUI 单页工程开发包 ，解压后进行第 3 步安装依赖。 3. 安装依赖 第 1 种, 通过 npm (部分地区安装较慢) # 安装依赖 $ npm install 第 2 种, 通过cnpm (推荐) # 安装cnpm $ npm install -g cnpm --registry=https://registry.npmmirror.com # 安装依赖 $ cnpm install 第 3 种, yarn 安装 # 安装 $ npm install -g yarn # 安装依赖 $ yarn install 4. 运行预览 执行npm run dev会自动打开默认浏览器预览，编辑内容实时刷新。 # 运行预览 $ npm run dev Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/createpage.html":{"url":"chapter3/createpage.html","title":"2. 创建新页面","keywords":"","body":"创建新页面 # 创建新页面 buijs create -t page-article -t 为 template 的简写，page-article 为内置的模板名 更多模板及 buijs 命令的使用请参考buijs 使用文档 如果没有这个命令行，也可以根据页面的定义规则，手动创建。 新页面 BUI 的单页页面，由同名不同类型的 2 个文件组成，一个是模板，一个是模块（包含特定的格式）。 通过上面命令会在工程 src/pages/ 目录下新增一个 article 的文件夹，包含 article.html article.js 两个文件。 模板 pages/article/article.html 文章详情 ... 模块 pages/article/article.js loader.define(function (require, exports, module, global) { // 业务逻辑必须在 loader.define 里面执行，默认进来就是执行的 console.log(\"article page\"); // 接收上一个页面传过来的参数 let params = bui.history.getParams(module.id); }); 通常用来接收上一个页面的参数，组织当前页面的业务及交互； 页面预览 修改浏览器的地址 index.html#main 为 index.html#pages/article/article 就可以直接预览效果 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/router.html":{"url":"chapter3/router.html","title":"3. 跳转与传参","keywords":"","body":"跳转与传参 通过修改首页的模板，实现点击跳转功能。 通过 npm run dev 默认打开的就是首页，http://localhost:3000/#main 默认的首页模块名为main ，代表首页的主要入口，它是一个自定义名字的组件，可以指定任何一个页面组件作为首页。 默认的 main 指向的路径为 pages/main/main.html pages/main/main.js 。 静态跳转 pages/main/main.html 首页 跳转到详情页 main 新增了一个按钮，按钮样式名为 bui-btn 加上href=\"\"属性，指向一个相对路径，称为静态跳转，后面加了参数 id=b1。 动态跳转 在参数是未知的情况下，就需要用到动态跳转了。 pages/main/main.html 首页 跳转到详情页 pages/main/main.js loader.define(function (require, exports, module, global) { // 单页模板里的DOM事件绑定需要把 $ 改成 router.$ router.$(\"#gotoArticle\").click(function (e) { bui.load({ url: \"pages/article/article.html\", param: { id: \"b1\", }, }); }); }); 接收参数 有 3 种接收参数 pages/article/article.js loader.define(function (require, exports, module, global) { // 1. 接收组件参数包含URL, 推荐 let params = bui.history.getParams(module.id); // params = { id: \"a1\"} // 2. 只接收URL参数 let params = bui.history.getParams(\"url\"); // params = { id: \"a1\"} // 3. 1.7.x 支持 let props = module.props; }); 预览效果 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/ajax.html":{"url":"chapter3/ajax.html","title":"4. 数据请求","keywords":"","body":"数据请求 利用 ajax+store 的例子，实现一个普通列表的请求与展示。 模拟数据 我们在 main 目录下，新建一个main.json的列表模拟数据，内容如下： pages/main/main.json { \"status\": 200, \"data\": [ { \"id\": \"bui1\", \"title\": \"文章标题1\", \"image\": \"images/applogo.png\", \"desc\": \"文章的内容简介\" }, { \"id\": \"bui2\", \"title\": \"文章标题2\", \"image\": \"images/applogo.png\", \"desc\": \"文章的内容简介\" }, { \"id\": \"bui3\", \"title\": \"文章标题3\", \"image\": \"images/applogo.png\", \"desc\": \"文章的内容简介\" } ] } 修改模板的绑定 pages/main/main.html ... 文本 --> 修改模块，一些简单的绑定使用 store 的模板即可处理 pages/main/main.js loader.define(function (require, exports, module, global) { // 初始化数据行为存储 const bs = bui.store({ el: `#${module.id}`, scope: \"list\", data: { datas: [], }, mounted: function () { // 请求列表数据 this.getList({ url: `${module.path}main.json`, data: {}, }); }, methods: { getList(opt) { bui.ajax(opt).then( (result) => { // 请求成功就赋值 this.datas = result.data; }, function (result, status) { // 失败 console.log(status) } ); }, }, watch: {}, computed: {}, templates: { tplList: function (data) { let html = \"\"; data.forEach((item) => { html += ` ${item.title} `; }); return html; }, }, }); // 返回实例供外部调用 return bs; }); 更多 store 的用法，请查看进阶篇数据驱动 效果预览 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/global.html":{"url":"chapter3/global.html","title":"5. 公共方法与配置","keywords":"","body":"公共方法与配置 像上一章一样，直接调用 bui.ajax 来实现数据请求，用起来方便，维护起来却十分困难，所以需要有一个放公共方法及配置的地方。 公共方法的定义 我们在 src/js/ 目录下，新建 config 目录，目录下新建一个global.js文件，内容如下： js/config/global.js loader.global(function (global) { /** * @description: 公共的请求方法 * @param {object} opt 参考 bui.ajax * @param {string} opt.url 必填url地址 默认 \"\" * @param {object} [opt.data] 默认 {} * @param {string} [opt.method] 默认的请求方法 \"GET\" | \"POST\" * @return {*} * @example {*} * global.ajax({ url:\"http://easybui.com/demo/json/shop.json\", data:{} }).then(function(res){ // 成功的时候输出 console.log(res); }) */ function ajax(opt) { // 可以公共处理请求的headers let opts = $.extend(true, { headers: { token: \"buixxxx\" } }, opt); return bui.ajax(opts); } // 一定要抛出这个方法，外部才能调用到 return { ajax: ajax, }; }); 公共方法的使用 1. 首页引入 src/index.html 2. 首页调用 src/index.js bui.ready(function (global) { // 1.7.0 以上才支持 global .ajax({ url: \"http://easybui.com/demo/json/shop.json\", }) .then(function (res) { console.log(res); }); // 1.6.x 支持 loader .global() .ajax({ url: \"http://easybui.com/demo/json/shop.json\", }) .then(function (res) { console.log(res); }); }); 3. 组件的调用 src/pages/main/main.js loader.define(function(require,exports,module,global){ // 调用得到global的所有方法 ... getList(opt){ global.ajax(opt).then((result)=>{ // 请求成功就赋值 this.datas = result.data; },function(result,status){ // 失败 console.log(status) }); } ... }) 公共配置 1. 控件配置 BUI 的每个控件都支持默认的配置修改，可以根据业务需要去配置属于自己的交互版本 js/config/global.js loader.global(function (global) { // ajax 的全局配置，这样所有的请求都会加上这个token，一般不建议这样简单粗暴去修改 bui.config.ajax = { headers: { token: \"buixxxxx\", }, }; // 默认 hint是居中的交互，可以改成全部从底部交互 bui.config.hint = { position: \"bottom\", effect: \"fadeInUp\", }; }); 2. 业务配置 js/config/global.js loader.global(function (global) { let baseurl = \"http://easybui.com/\"; let apiurl = baseurl + \"demo/\"; return { baseurl: baseurl, apiurl: apiurl, }; }); Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:27:46 "},"chapter3/debug.html":{"url":"chapter3/debug.html","title":"6. 跨域调试","keywords":"","body":"跨域调试 接口跨域配置 1. 修改配置 假设请求的接口地址为: http://www.easybui.com/api/getDetail?id=123 打开根目录下的 app.json，里面有个键值 proxy 的对象。 { ... \"proxy\": { \"/api\": { \"target\": \"http://www.easybui.com\", \"changeOrigin\":true, \"ssl\": false } } ... } \"/api\": 为请求接口的二级目录 \"target\": \"http://www.easybui.com\": 为请求接口的域名地址 2. 修改请求的方法 // 一定要注意这个请求的url是 \"api/xxx\", 不能是 \"/api/xxx\" bui .ajax({ url: \"api/getDetail\", data: { id: \"123\", }, }) .then(function (res) {}); 注意: ajax 请求的时候请使用相对工程路径,这样代理才会正确转发. 结合全局配置，可以把 url 前部分作为变量配置项, 调试的时候为空, 打包的时候再改为正式环境，打包后没有跨域问题。 global.js loader.global(function () { // 本地调试为空\"\"，会自动转发到app.json配置的域名，正式环境修改为接口域名： http://www.easybui.com/ let baseurl = \"\"; // 模拟请求的接口 let apiGetListUrl = baseurl + \"api/getDetail/\"; return { api: { getListUrl: apiGetListUrl, }, }; }); main.js loader.define(function(require,exports,module,global){ // 请求 global.ajax({ url: global.api.getListUrl data: { id:\"123\" } }).then(function(res){ console.log(res) }) }) 关于代理的更多配置,可以查看 http-proxy-middleware 的使用说明. 手机远程调试 VConsole 是在手机端调试的利器， 1.7.x 工程默认内置了这个模块，直接引入即可。 方法 1: src/index.js // 手机调试，正式环境请自行去掉 import VConsole from \"vconsole\"; const vConsole = new VConsole(); bui.ready(function () { // 控件初始化 }); 方法 2: src/index.html // VConsole will be exported to `window.VConsole` by default. var vConsole = new window.VConsole(); 手机远程预览 假设打开的预览地址为 http://localhost:3000 ，把localhost改成 您的本机 IP 10.0.0.123，可以通过微信扫码预览，或者手动输入地址。 微信调试缓存 微信调试需要注意的是,微信里面的缓存很严重,每次修改,需要给修改的 js 引用,后面增加?t=时间戳之类的方式,来确保脚本的更新. 去除脚本缓存 例如: 单页模块化开发, 通过重新初始化window.loader设置缓存参数为 false, 加载的模块便会采用时间戳的方式加载. src/index.js // 这行代码必须在bui.ready 之前 window.loader = bui.loader({ cache: false }); bui.ready(function () { // }); Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:27:45 "},"chapter3/buifast.html":{"url":"chapter3/buifast.html","title":"7. 提高效率","keywords":"","body":"提高效率 bui-fast是一个 BUI 控件的代码片段，通过简单的控件名即可生成对应的结构及初始化。 安装 bui-fast 这里以 VSCode 为例，通过应用市场搜索 bui-fast安装即可。其它编辑器可以查看使用文档 基本使用 html 文件中，输入ui-，生成结构； js 文件中，输入bui-控件名-demo的形式，输入一个完整的 demo 例子，再分别粘贴到 html 模板文件里。 main.html 例如：输入 ui-list-thumbnail 生成列表带缩略图的结构 商品标题 天河区 3公里 ￥50 例如：输入 ui-box 生成弹性布局结构 main.js 例如：输入 bui-slide-demo 生成轮播图的初始化代码 // 焦点图 js 初始化: var uiSlide = bui.slide({ id:\"#uiSlide\", height:380, autopage: true, loop: true, data: [{ image: \"images/banner01.png\", url: \"pages/ui_controls/bui.slide_title.html\", },{ image: \"images/banner02.png\", url: \"pages/ui_controls/bui.slide_title.html\", }] }) // 焦点图 html 对应的结构: 更多操作请查看bui-fast 使用文档 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/control.html":{"url":"chapter3/control.html","title":"8. 控件","keywords":"","body":"控件 控件：指有交互效果的 UI，一般包含 HTML 结构及 JS 代码。BUI 有 50 多个交互控件，兼容，灵活，可以组合成上百种交互效果。 初始化 轮播图效果演示 支持手势操作 // 焦点图 js 初始化: var uiSlide = bui.slide({ id:\"#uiSlide\", width:375, height:200, autopage: true, loop: true, zoom: false, data: [{ image: \"http://easybui.com/demo/images/banner01.png\", target: \"_blank\", url: \"http://www.easybui.com/demo/source.html?url=pages/ui_controls/bui.slide&code=html,js,result\", },{ image: \"http://easybui.com/demo/images/banner02.png\", target: \"_blank\", url: \"http://www.easybui.com/demo/source.html?url=pages/ui_controls/bui.slide&code=html,js,result\", }] }) 例如：轮播图包含以下代码片段 // 焦点图 js 初始化: var uiSlide = bui.slide({ id: \"#uiSlide\", height: 380, autopage: true, loop: true, data: [ { image: \"images/banner01.png\", url: \"pages/ui_controls/bui.slide_title.html\", }, { image: \"images/banner02.png\", url: \"pages/ui_controls/bui.slide_title.html\", }, ], }); 控件的具体参数请参考 API 文档 slide api 带中括号的参数为可选，例如[menu] [width]，不带中括号的参数为必要项，例如id 控件方法 可以通过刚刚的实例uiSlide，常用的场景，都能找到对应的方法。 // 自动播放 uiSlide.start(); // 停止播放 uiSlide.stop(); // 跳转下一个 uiSlide.next(); // 获取当前索引 uiSlide.index(); // 跳转第2个图片 uiSlide.to(1); // 跳转第2个图片不需要动画 uiSlide.to(1, \"none\"); 动态渲染 BUI 的控件只初始化一次，无需重复初始化，通过 option 方法，修改 data 的数据。 // 示例数据 var data = [ { image: \"images/banner01.png\", }, ]; // 修改动态值 uiSlide.option(\"data\", data); 例子： // 先初始化 var uiSlide = bui.slide({ id: \"#slide\", height: 380, autopage: true, data: [], // 数据为空 }); // 异步请求 bui .ajax({ url: \"http://www.easybui.com/demo/json/slide.json\", }) .then(function (result) { var data = result.data || []; // 修改数据 uiSlide.option(\"data\", data); }); slide.json 接口返回的数据为： { \"status\": 200, \"info\": \"获取成功\", \"data\": [{ \"image\": \"images/banner01.png\", \"url\": \"pages/ui_controls/bui.slide_title.html\" },{ \"image\": \"images/banner02.png\", \"url\": \"pages/ui_controls/bui.slide_title.html\" }] } 订阅式事件 控件的内部绑定了一些方法，在外层重新绑定一次会影响内部实现，通过订阅式监听事件则不会相互影响。 例如：监听跳转事件，不管轮播图滑动跳转，点击跳转，还是自动跳转到第几个，都会触发这个回调，展示当前的索引值。 uiSlide.on(\"to\", function () { let index = this.index(); console.log(index); }); 更多控件 BUI 控件演示 BUI 控件 API 文档 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 16:25:58 "},"chapter3/component.html":{"url":"chapter3/component.html","title":"9. 组件","keywords":"","body":"组件 组件：BUI 的组件是包含同名的 HTML 结构及 JS 代码，按照特定格式组织可以复用的代码，BUI 的组件默认是按需加载，也支持一次性加载。 特点 特点 BUI 模块 BUI 组件 ES6 模块 静态编译 支持 支持 支持 动态编译 支持 支持 不支持 一次性加载 支持 支持 支持 按需加载 支持 支持 不支持 BUI 组件跟模块的进一步区别：组件包含 html、js 文件，且是默认执行初始化的；模块只有 js 文件，只定义，不执行。 组件定义 以轮播图为例，把以下两个文件，放到 pages/ 目录下的任何位置，建议在 pages/components/ 目录下，再新建一个slide的目录 pages/components/slide/slide.html pages/components/slide/slide.js loader.define(function (require, exports, module, global) { // 1.7.x 支持，接收外部参数 let props = module.props; // 1.6.x 支持，接收外部参数 // let props = bui.history.getParams(module.id); // 通过component 的id进行初始化 props.id = `#${module.id} .bui-slide`; // 处理默认参数 props.height = props.height || 200; props.autopage = true; props.data = props.data || [ { image: \"http://easybui.com/demo/images/banner01.png\", }, { image: \"http://easybui.com/demo/images/banner02.png\" }, ]; // 初始化: const uiSlide = bui.slide(props); // 抛出组件供外部调用 return uiSlide; }); 组件使用 只需一行代码（用 id 进行区分不同的组件）会把高度跟 id 传到组件中 组件动态传参 动态传参需要等待数据加载完成，再编译组件，component 标签加上delay=\"true\"属性，直到loader.delay才会编译，且只编译一次。 pages/main/main.html pages/main/main.js loader.define(function (require, exports, module, global) { // 异步请求 bui .ajax({ url: \"http://www.easybui.com/demo/json/slide.json\", }) .then(function (result) { // 只编译一次组件 loader.delay({ id: \"#slide\", param: { height: 300, data: result.data, }, }); }); }); 组件同步开发 业务中有些接口会比较复杂，需要通过多次调用以后才能拿到最终的值，很容易导致回调地狱，利用 es6 的async await同步开发的方式则可以避免。 loader.define(async function (require, exports, module, global) { // 同步编译按顺序执行 // 1. 同步请求token let token = await bui.ajax({ url: \"http://www.easybui.com/demo/json/token.json\", data: { uid: \"bui\", }, }); // 2. 通过token请求接口 let result = await bui.ajax({ url: \"http://www.easybui.com/demo/json/slide.json\", data: { token: token.data, }, }); // 3. 同步编译 const uiSlide = await loader.delay({ id: \"#slide\", param: { height: 300, data: result.data, }, }); }); 注意：同步开发需要编译工程的支持，直接部署或者本地打开的方式都会导致报错。 组件预览 修改浏览器的地址 index.html#main 为 index.html#pages/components/slide/slide 就可以直接预览效果 图片为整个页面的预览效果 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/form.html":{"url":"chapter3/form.html","title":"10. 表单与校验","keywords":"","body":"表单 基本元素 输入框 密码框 多行输入框 滑动条 切换按钮 收藏 点赞 单选 女男 多选 女 男 自定义选择 表单控件 带删除图标 // 显示删除 var userInput = bui.input({ id: \".user-input\", callback: function (e) { // 清空数据 this.empty(); }, }); 显示密码 // 显示密码 var password = bui.input({ id: \"#passwordInput\", iconClass: \".icon-eye\", onBlur: function (e) { if (e.target.value == \"\") { return false; } // 注册的时候校验只能4-18位密码 var rule = /^[a-zA-Z0-9_-]{4,18}$/; if (!rule.test(e.target.value)) { bui.hint(\"密码只能由4-18位字母或者数字上下横杠组成\"); return false; } return true; }, callback: function (e) { //切换类型 this.toggleType(); // $(e.target).toggleClass(\"active\"); }, }); 字数限制 // 字数限制 var comment = bui.input({ id: \"#commentContent\", showLength: true, showIcon: false, maxLength: 100, }); 表单案例 以 bui.store + 表单为例，开发一个注册页面。 快速书写：ui-page 生成 BUI 标准页面，ui-form-edit 编辑表单生成的左右结构，ui-form-submit 生成按钮提交结构， 以下结构加入了 b-model的实时绑定指令，绑定数据到 store 到 datas 的某个字段上，b-model-lazy 1.7.0 新增，支持输入结束后再绑定。 pages/register/index.html 注册页 帐号 密码 确认密码 性别 女 男 重置 提交 pages/register/index.js loader.define(function (requires, exports, module, global) { // 初始化数据行为存储 const bs = bui.store({ el: `#formpage`, // 容器下的行为指令 scope: \"form\", // 容器下的相同作用域指令 data: { datas: { username: \"\", // 账号名 password: \"\", // 密码 comfirmpassword: \"\", //确认密码 sex: \"woman\", //性别 }, }, methods: { submit() { // 模拟发起请求，提交 console.log(this.datas); bui .ajax({ url: global.apiurl + \"json/token.json\", data: this.datas, // 表单收集到的内容 }) .then((res) => { bui.hint(\"提交成功\"); }); }, reset() { // 重置清空 this.datas = { username: \"\", // 账号名 password: \"\", // 密码 comfirmpassword: \"\", //确认密码 sex: \"\", //性别 }; bui.hint(\"重置成功\"); }, }, templates: {}, mounted: function () { // 数据解析后执行 }, }); return bs; }); 点击提交按钮，得到右边的数据 效果预览 表单校验 全局校验 在表单填写完成以后提交的时候再做提醒。 在 methods 新增一个方法，用于全局校验，点击提交才触发 pages/register/index.js ... methods: { checkForm(datas){ // 全局校验 for(let key in datas ){ let item = datas[key]; if( item === \"\"){ bui.hint(`${key}的内容不能为空`) return false; } } if( datas[\"password\"] !== datas[\"comfirmpassword\"]){ bui.hint(`两次密码不一致，请检查后提交`) } return true; }, submit(){ // 如果有为空的数据不能提交 let canSumit = this.checkForm(this.datas); if( !canSumit ){ return; } bui.ajax({ url: global.apiurl + \"json/token.json\", data: this.datas // 表单收集到的内容 }).then((res)=>{ bui.hint(\"提交成功\") }) }, } ... 真正的表单校验肯定比示例要复杂很多，复杂的校验可以使用第三方插件校验。 局部校验 局部校验有两种方式，一种是失去焦点的时候执行方法判断（1.6.0 以上），一种是实时判断触发（1.7.0 以上支持） pages/register/index.html 1.6.x 失去焦点判断 b-blur ... 帐号 ... ... 1.7.x 实时判断 b-trigger ... 帐号 ... ... pages/register/index.js ... methods: { regexFromString(string) { // 把正则字符串转为表达式 var match = /^\\/(.*)\\/([a-z]*)$/.exec(string) return new RegExp(match[1], match[2]) }, checkRule(dom,keyname){ // 自定义规则 let rule = dom.getAttribute(\"rule\"); // 自定义提醒 let tip = dom.getAttribute(\"tip\"); // 转正则表达式 let regexp = this.regexFromString(rule); // 取值 let val = dom.value; if( !regexp.test(val) ){ // 清空错误格式 属性为 b-trigger 时不做清空处理 this.datas[keyname] = \"\"; // 提醒 bui.hint(tip) return false; } }, } ... Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 16:46:05 "},"chapter3/storage.html":{"url":"chapter3/storage.html","title":"11. 数据存储","keywords":"","body":"数据存储 bui.storage 是基于 localStorage，sessionStorage 封装的存储对象及多条数据的方法库。 存储数据 // 初始化，默认使用localstorage保存一条数据 const uiStorage = bui.storage(); uiStorage.set(\"userinfo\", { username: \"bui\", }); 存储多条数据 // 可以存2条数据，大于2则覆盖最先存储的一条数据 const uiStorage = bui.storage({ size: 2 }); // 存储第1条 uiStorage.set(\"userinfo\", { username: \"wangxiaoo\", }); // 存储第2条 uiStorage.set(\"userinfo\", { username: \"bui\", }); // 存储第3条, username:\"wangxiaoo\" 会删除，变成第一条数据为 username:\"bui\" uiStorage.set(\"userinfo\", { username: \"easybui\", }); 获取数据 // 获取到数组 let uinfos = uiStorage.get(\"userinfo\"); // 获取第一条数据 let uinfo = uiStorage.get(\"userinfo\", 0); 删除数据 // 删除第一条数据 uiStorage.remove(\"userinfo\", 0); // 删除整个字段 uiStorage.remove(\"userinfo\"); 缓存案例 效果预览 新增一个登录页，增加登录缓存功能。 pages/login/login.html 帐号 密码 保存密码 登录 pages/login/login.js loader.define(function (requires, exports, module, global) { // 初始化数据行为存储 const bs = bui.store({ el: `#loginpage`, // 容器下的行为指令 scope: \"form\", // 容器下的相同作用域指令 data: { datas: { username: \"\", // 账号名 password: \"\", // 密码 save: false, //保存密码 }, }, methods: { savePassword(val) { // 保存密码 if (this.$data.datas.save) { global.storage.set(\"userinfo\", val); } else { global.storage.remove(\"userinfo\"); } }, submit() { bui .ajax({ url: global.apiurl + \"json/token.json\", data: this.datas, // 表单收集到的内容 }) .then((res) => { bui.hint(\"登录成功\"); // 成功的账号才需要保存密码，且密码应该使用md5之类的进行加密再存储到本地 this.savePassword(this.$data.datas); // 保存token global.storage.set(\"token\", res.data); // 跳转首页 bui.load({ url: \"main\", }); }); }, }, templates: {}, mounted: function () { // 获取本地缓存 let uinfo = global.storage.get(\"userinfo\", 0); // 如果有缓存数据，则赋值 typeof uinfo === \"object\" && (this.datas = uinfo); }, }); return bs; }); 把 storage 放在了 global.js 的公共方法里，可以通过 global.storage 调用，具体代码请查看整个案例。 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/login.html":{"url":"chapter3/login.html","title":"12. 登录权限","keywords":"","body":"登录权限 登录的权限的处理取决于你的应用展示方式，展示方式不同，实现方式也会有所不同。 1. 首页登录 最简单的一种处理，只需配置首页main的指向为登录页，每次都只能通过首页登录进来。 src/index.js bui.ready(function (global) { // 初始化路由 router.init({ id: \"#bui-router\", indexModule: { template: \"pages/login/index.html\", script: \"pages/login/index.js\", }, beforeLoad(e) { let token = global.storage.get(\"token\", 0); // 如果不在登录页，且没有用户信息，则只能进入首页 if (e.target.name !== \"main\" && !token) { bui.load({ url: \"main\", }); // 禁止进入其它页面 return false; } }, }); }); pages/login/index.js ... // 修改登录成功的方法 submit(){ bui.ajax({ url: global.apiurl + \"json/token.json\", data: this.datas // 表单收集到的内容 }).then((res)=>{ bui.hint(\"登录成功\") // 保存token,用于跳转前的检测 global.storage.set(\"token\",res.data); // 跳转到列表页，这时候main指向的是 pages/login/index.html bui.load({ url:\"pages/main/main.html\" }) }) } ... 2. 全局登录 在任意的页面里面，根据需要展示登录。 右上角新增触发登录按钮 pages/main/main.html 定义个打开弹窗的方法，以及关闭弹窗以后的数据操作方法。 pages/main/main.js loader.define(function(requires, exports, module, global){ // 登录页 var loginPage = null; // 初始化数据行为存储 const bs = bui.store({ el: `#${module.id}`, scope: \"list\", ... methods: { login(){ // 并传参给登录页，登录页登录成功以后，指向 if( loginPage ){ loginPage.open(); return; } loginPage = bui.page({ url:\"pages/login/page.html\", param: {} }) }, refresh(){ // 配合弹窗关闭时的方法，执行数据刷新方法, 例如新增数据 this.datas.push({ \"id\":\"bui4\", \"title\":\"文章标题4\", \"image\":\"images/applogo.png\", \"desc\":\"文章的内容简介\" }) }, }, }) return bs; }) 在登录页复制一个 page.html page.js 来实现，原本的后退按钮那里改成了点击绑定关闭方法。 pages/login/page.html pages/login/page.js loader.define(function(requires, exports, module, global){ // 初始化数据行为存储 const bs = bui.store({ el: `#loginpart`, // 容器下的行为指令 ... methods: { close(){ // 关闭登录页，且刷新当前要做的操作 var dialog = bui.history.getPageDialog(module.id); // 关闭当前弹窗 dialog.close(); }, submit(){ ... bui.ajax({ url: global.apiurl + \"json/token.json\", data: this.datas // 表单收集到的内容 }).then((res)=>{ bui.hint(\"登录成功\") // 关闭弹窗并刷新页面 this.close(); // 获取最后的页面，执行某个刷新方法 let lastHistory = bui.history.getLast(\"exports\"); lastHistory.refresh(); }) }, }, ... }) return bs; }) 以上只展示了关键代码，请参考案例加以理解。 登录效果预览 点击登录会更新多一条数据 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:36:43 "},"chapter3/import.html":{"url":"chapter3/import.html","title":"13. 第三方插件","keywords":"","body":"第三方插件 1. 全局引入 插件必须放在 src/js/plugins/ 目录下，插件才不会被 2 次编译。 src/index.html 2. 按需动态引入 在需要引入的地方，通过 loader.import 动态引入 loader.define(function (requires, exports, module, global) { // 例如：异步导入 loader.import( [\"js/plugins/echarts/echarts.css\", \"js/plugins/echarts/echarts.js\"], function () { // 回调里才能拿到 echarts全局变量 echarts.init(); } ); }); 有些插件，例如高德地图，只支持全局引入。 3. 导入 NPM 模块 1.7.0 以上支持引入 NPM 模块，且默认工程已经加入 vconsole 模块，如果没有，请先执行以下命令。导入的 npm 模块最终是静态编译在脚本中。 执行安装模块命令 # 进入工程 cd bui-demo # 安装模块 npm i vconsole --save 在需要的地方导入模块 src/index.js // 导入手机调试模块 import VConsole from \"vconsole\"; // 初始化手机调试 const vConsole = new VConsole(); Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-04-25 14:27:24 "},"chapter3/package.html":{"url":"chapter3/package.html","title":"14. 打包部署","keywords":"","body":"打包部署 1. 案例下载 恭喜您，通过前面章节的学习，一个包含BUI的大部分知识点，完整有登录权限的案例，已经完成了！可以点击bui-demo.zip下载。如果您还想进一步学习，可以通过高级篇，组件篇，API篇，及专栏的文章来学习。 2. 编译 # 进入工程 cd bui-demo # 编译工程为es5且压缩版本 npm run build 3. 存成压缩包 进入dist目录，全选文件，右键另存为压缩包 zip格式，上传或部署到相应平台。 4. 打包合并成单页文件 单页文件可以在webapp一次性加载，结合缓存，第一次加载以后，速度媲美本地应用。（可选） # 进入工程 cd bui-demo # 编译工程成同步模块，最终 pages/ 下面的模块，都会合并进 index.js npm run package 5. 打包应用 请查看第三方平台教程，或BUI专栏文章。 Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2022-01-09 00:15:55 "},"chapter3/update.html":{"url":"chapter3/update.html","title":"15. 版本升级","keywords":"","body":"版本升级 查看当前版本 在chrome调试面板输入 bui.version（当前版本），bui.versionCode（当前版本的日期） 查看当前平台 在chrome调试面板输入 bui.currentPlatform 更新Webapp版 webapp版为默认通用的版本 # 进入工程 cd bui-demo # 更新 bui.js，bui.css 为webapp最新版 buijs update 更新Link版 link版为在link容器运行的版本 # 进入工程 cd bui-demo # 更新 bui.js，bui.css 为link最新版 buijs update -p link 更新Dcloud版 # 进入工程 cd bui-demo # 更新 bui.js，bui.css 为dcloud最新版 buijs update -p dcloud 更新APICloud版 # 进入工程 cd bui-demo # 更新 bui.js，bui.css 为apicloud最新版 buijs update -p apicloud Copyright ©2017-2022 easybui.com all right reserved，powered by Gitbook该文件修订时间： 2021-12-28 16:09:21 "}}